{
  "hash": "bf1dc39509ba72dc43b73620b4583635",
  "result": {
    "markdown": "---\ntitle: 'Tutorial: Making Plots with Julia'\nexecute:\n  error: true\n  warning: true\n---\n\n\n\n## Overview\n\nThis tutorial will give some examples of plotting and plotting features in Julia, as well as providing references to some relevant resources. The main plotting library is `Plots.jl`, but there are some others that provide useful features.\n\n## Some Resources\n\n* `Plots.jl` [useful tips](https://docs.juliaplots.org/latest/basics/#Useful-Tips)\n* `Plots.jl` [examples](https://docs.juliaplots.org/latest/generated/gr/)\n* [Plot attributes](http://docs.juliaplots.org/latest/generated/attributes_plot/)\n* [Axis attributes](http://docs.juliaplots.org/latest/generated/attributes_axis/#Axis)\n* [Color names](http://juliagraphics.github.io/Colors.jl/stable/namedcolors/)\n\n\n## Demos\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing Plots\nusing Random\nRandom.seed!(1);\n```\n:::\n\n\n### Line Plots\nTo generate a basic line plot, use `plot`.\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ny = rand(5)\nplot(y, label=\"original data\", legend=:topright)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](julia-plots_files/figure-html/cell-4-output-1.svg){}\n:::\n:::\n\n\nThere's a lot of customization here that can occur, a lot of which is discussed in the docs or can be found with some Googling.\n\n### Adding Plot Elements\n\nNow we can add some other lines and point markers.\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ny2 = rand(5)\ny3 = rand(5)\nplot!(y2, label=\"new data\")\nscatter!(y3, label=\"even more data\")\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n![](julia-plots_files/figure-html/cell-5-output-1.svg){}\n:::\n:::\n\n\nRemember that an exclamation mark (!) at the end of a function name means that function modifies an object in-place, so `plot!` and `scatter!` modify the current plotting object, they don't create a new plot.\n\n### Removing Plot Elements\n\nSometimes we want to remove legends, axes, grid lines, and ticks.\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nplot!(legend=false, axis=false, grid=false, ticks=false)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](julia-plots_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\n### Aspect Ratio\n\nIf we want to have a square aspect ratio, use `ratio = 1`.\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nv = rand(5)\nplot(v, ratio=1, legend=false)\nscatter!(v)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](julia-plots_files/figure-html/cell-7-output-1.svg){}\n:::\n:::\n\n\n### Heatmaps\n\nA heatmap is effectively a plotted matrix with colors chosen according to the values. Use `clim` to specify a fixed range for the color limits.\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nA = rand(10, 10)\nheatmap(A, clim=(0, 1), ratio=1, legend=false, axis=false, ticks=false)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](julia-plots_files/figure-html/cell-8-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nM = [ 0 1 0; 0 0 0; 1 0 0]\nwhiteblack = [RGBA(1,1,1,0), RGB(0,0,0)]\nheatmap(c=whiteblack, M, aspect_ratio = 1, ticks=.5:3.5, lims=(.5,3.5), gridalpha=1, legend=false, axis=false, ylabel=\"i\", xlabel=\"j\")\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](julia-plots_files/figure-html/cell-9-output-1.svg){}\n:::\n:::\n\n\n#### Custom Colors\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nusing Colors\n\nmycolors = [colorant\"lightslateblue\",colorant\"limegreen\",colorant\"red\"]\nA = [i for i=50:300, j=1:100]\nheatmap(A, c=mycolors, clim=(1,300))\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](julia-plots_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\n### Plotting Areas Under Curves\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\ny = rand(10)\nplot(y, fillrange= y.*0 .+ .5, label= \"above/below 1/2\", legend =:top)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](julia-plots_files/figure-html/cell-11-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nx = LinRange(0,2,100)\ny1 = exp.(x)\ny2 = exp.(1.3 .* x)\nplot(x, y1, fillrange = y2, fillalpha = 0.35, c = 1, label = \"Confidence band\", legend = :topleft)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](julia-plots_files/figure-html/cell-12-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nx = -3:.01:3\nareaplot(x, exp.(-x.^2/2)/√(2π),alpha=.25,legend=false)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n![](julia-plots_files/figure-html/cell-13-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nM = [1 2 3; 7 8 9; 4 5 6; 0 .5 1.5]\nareaplot(1:3, M, seriescolor = [:red :green :blue ], fillalpha = [0.2 0.3 0.4])\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](julia-plots_files/figure-html/cell-14-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nusing SpecialFunctions\nf = x->exp(-x^2/2)/√(2π)\nδ = .01\nplot()\nx = √2 .* erfinv.(2 .*(δ/2 : δ : 1) .- 1)\nareaplot(x, f.(x), seriescolor=[ :red,:blue], legend=false)\nplot!(x, f.(x),c=:black)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n![](julia-plots_files/figure-html/cell-15-output-1.svg){}\n:::\n:::\n\n\n### Plotting Shapes\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nrectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])\ncircle(r,x,y) = (θ = LinRange(0,2π,500); (x.+r.*cos.(θ), y.+r.*sin.(θ)))\nplot(circle(5,0,0), ratio=1, c=:red, fill=true)\nplot!(rectangle(5*√2,5*√2,-2.5*√2,-2.5*√2),c=:white,fill=true,legend=false)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![](julia-plots_files/figure-html/cell-16-output-1.svg){}\n:::\n:::\n\n\n### Plotting Distributions\n\nThe [`StatsPlots.jl`](https://github.com/JuliaPlots/StatsPlots.jl/blob/master/README.md) package is very useful for making various plots of probability distributions.\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nusing Distributions, StatsPlots\nplot(Normal(2, 5))\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n![](julia-plots_files/figure-html/cell-17-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nscatter(LogNormal(0.8, 1.5))\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n![](julia-plots_files/figure-html/cell-18-output-1.svg){}\n:::\n:::\n\n\nWe can also use this functionality to plot distributions of data in tabular data structures like `DataFrames`.\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nusing DataFrames\ndat = DataFrame(a = 1:10, b = 10 .+ rand(10), c = 10 .* rand(10))\n@df dat density([:b :c], color=[:black :red])\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n![](julia-plots_files/figure-html/cell-19-output-1.svg){}\n:::\n:::\n\n\n### Editing Plots Manually\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\npl = plot(1:4,[1, 4, 9, 16])\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n![](julia-plots_files/figure-html/cell-20-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\npl.attr\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nRecipesPipeline.DefaultsDict with 30 entries:\n  :dpi                      => 96\n  :background_color_outside => :match\n  :plot_titlefontvalign     => :vcenter\n  :warn_on_unsupported      => true\n  :background_color         => RGBA{Float64}(1.0,1.0,1.0,1.0)\n  :size                     => (672, 480)\n  :inset_subplots           => nothing\n  :display_type             => :auto\n  :overwrite_figure         => true\n  :html_output_format       => :svg\n  :plot_titlefontfamily     => :match\n  :plot_titleindex          => 0\n  :foreground_color         => RGB{N0f8}(0.0,0.0,0.0)\n  :window_title             => \"Plots.jl\"\n  :plot_titlefontrotation   => 0.0\n  :extra_plot_kwargs        => Dict{Any, Any}()\n  :plot_titlefonthalign     => :hcenter\n  :pos                      => (0, 0)\n  :tex_output_standalone    => false\n  :extra_kwargs             => :series\n  :layout                   => 1\n  :thickness_scaling        => 1\n  :plot_titlelocation       => :center\n  :plot_titlefontsize       => 16\n  :plot_title               => \"\"\n  ⋮                         => ⋮\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\npl.series_list[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nPlots.Series(RecipesPipeline.DefaultsDict(:plot_object => Plot{Plots.GRBackend() n=1}, :subplot => Subplot{1}, :label => \"y1\", :fillalpha => nothing, :linealpha => nothing, :linecolor => RGBA{Float64}(0.0,0.6056031611752245,0.9786801175696073,1.0), :x_extrema => (NaN, NaN), :series_index => 1, :markerstrokealpha => nothing, :markeralpha => nothing…))\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\npl[:size]=(300,200)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n(300, 200)\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\npl\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n![](julia-plots_files/figure-html/cell-24-output-1.svg){}\n:::\n:::\n\n\n### Log-Scaled Axes\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\nxx = .1:.1:10\nplot(xx.^2, xaxis=:log, yaxis=:log)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n![](julia-plots_files/figure-html/cell-25-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.julia .cell-code}\nplot(exp.(x), yaxis=:log)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n![](julia-plots_files/figure-html/cell-26-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "julia-plots_files"
    ],
    "filters": [],
    "includes": {}
  }
}