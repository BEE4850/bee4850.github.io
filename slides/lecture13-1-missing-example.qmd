---
title: "Multiple Imputation and Class Wrap-Up"
subtitle: "Lecture 22"
author: "Vivek Srikrishnan"
course: "BEE 4850"
institution: "Cornell University"
date: "April 21, 2025"
format:
    revealjs:
        slide-number: c/t
        show-slide-number: all
        center-title-slide: true
        width: 1280
        height: 720
        transition: none
        toc: true
        toc-depth: 1
        toc-title: "Overview"
        history: false
        link-external-newwindow: true
        theme: ../sass/slides.scss
        template-partials:
            - title-slide.html
        menu:
            numbers: true
        html-math-method: mathjax
        include-in-header: mathjax-config.html
        date-format: long
        email-obfuscation: javascript
        chalkboard:
            theme: whiteboard
            buttons: true
        mermaid: 
            theme: dark
engine: julia
filters:
  - code-fullscreen
---

```{julia}
#| output: false

import Pkg
Pkg.activate(@__DIR__)
Pkg.instantiate()
```

```{julia}
#| output: false

using Random
using DataFrames
using DataFramesMeta
using CSV
using Dates
using Distributions
using ColorSchemes
using Plots
using StatsPlots
using StatsBase
using LaTeXStrings
using Measures
using Optim
using GLM

Random.seed!(1)

ENV["GKSwstype"] = "nul"

plot_font = "Computer Modern"
default(
    fontfamily=plot_font,
    linewidth=3, 
    framestyle=:box, 
    label=nothing, 
    grid=false,
    guidefontsize=18,
    legendfontsize=16,
    tickfontsize=16,
    titlefontsize=20,
    bottom_margin=10mm,
    left_margin=5mm
)

```

# Review

## Complete-Case Analysis

Common approach to missing data:

**Complete-case Analysis**: Only consider data for which all variables are available.

- Can result in bias if missing values have a systematic pattern.
- Could result in discarding a large amount of data.

## Missingness Complete At Random (MCAR)

:::: {.columns}
::: {.column width=50%}
**MCAR**: $M_Y$ is independent of $X=x$ and $Y=y$.

Complete cases are fully representative of the complete data:

$$\mathbb{P}(Y=y) = P(Y=y | M_Y=0)$$
:::
::: {.column width=50%}
```{julia}
#| label: fig-mcar
#| fig-cap: Illustration of MCAR Data
#| echo: true
#| code-fold: true

n = 50
x = rand(Uniform(0, 100), n)
logit(x) = log(x / (1 - x))
invlogit(x) = exp(x) / (1 + exp(x))
f(x) = invlogit(0.05 * (x - 50) + rand(Normal(0, 1)))
y = f.(x)

flin(x) = 0.25 * x + 2 + rand(Normal(0, 7))
y = flin.(x)
xpred = collect(0:0.1:100)

lm_all = lm([ones(length(x)) x], y)
y_lm_all = predict(lm_all, [ones(length(xpred)) xpred])

missing_y = Bool.(rand(Binomial.(1, 0.25), length(y)))
xobs = x[.!(missing_y)]
yobs = y[.!(missing_y)]
lm_mcar = lm([ones(n - sum(missing_y)) xobs], yobs)
y_lm_mcar = predict(lm_mcar, [ones(length(xpred)) xpred])


p1 = scatter(xobs, yobs, xlabel=L"$x$", ylabel=L"$y$", label=false, markersize=5, size=(600, 500), color=:blue)
scatter!(x[missing_y], y[missing_y], alpha=0.9, color=:lightgrey, label=false, markersize=5)
plot!(xpred, y_lm_all, color=:red, lw=3, label="Complete-Data Inference", ribbon=GLM.dispersion(lm_all), fillalpha=0.2)
plot!(xpred, y_lm_mcar, color=:blue, lw=3, linestyle=:dot, label="Observed-Data Inference", ribbon=GLM.dispersion(lm_mcar), fillalpha=0.2)

```
:::
::::

## Missingness At Random (MAR)

:::: {.columns}
::: {.column width=50%}
**MAR**: $M_Y$ is independent of $Y=y$ **conditional on $X=x$**.

Also called **ignorable** or **uninformative missingness**.

$$
\begin{align*}
\mathbb{P}&(Y=y | X=x) \\
&= \mathbb{P}(Y=y | X=x, M_Y=0)
\end{align*}
$$
:::
::: {.column width=50%}
```{julia}
#| label: fig-mar
#| fig-cap: Illustration of MAR Data
#| echo: true
#| code-fold: true

missing_y = Bool.(rand.(Binomial.(1,  invlogit.(0.1 * (x .- 75)))))
xobs = x[.!(missing_y)]
yobs = y[.!(missing_y)]
lm_mar = lm([ones(n - sum(missing_y)) xobs], yobs)
y_lm_mar = predict(lm_mar, [ones(length(xpred)) xpred])

p2 = scatter(xobs, yobs, xlabel=L"$x$", ylabel=L"$y$", label=false, markersize=5, size=(600, 500), color=:blue)
scatter!(x[missing_y], y[missing_y], alpha=0.9, color=:lightgrey, label=false, markersize=5)
plot!(xpred, y_lm_all, color=:red, lw=3, label="Complete-Data Inference", ribbon=GLM.dispersion(lm_all), fillalpha=0.2)
plot!(xpred, y_lm_mar, color=:blue, lw=3, linestyle=:dot, label="Observed-Data Inference", ribbon=GLM.dispersion(lm_mar), fillalpha=0.2)

```
:::
::::

## Missingness Not-At-Random (MNAR)

:::: {.columns}
::: {.column width=50%}
**MNAR**: $M_Y$ is dependent on $Y=y$ (and/or unmodeled variables).

Also called **non-ignorable** or **informative missingness**.

$$
\begin{align*}
\mathbb{P}&(Y=y | X=x) \\
&\neq \mathbb{P}(Y=y | X=x, M_Y=0)
\end{align*}
$$
:::
::: {.column width=50%}
```{julia}
#| label: fig-mnar
#| fig-cap: Illustration of MCAR Data
#| echo: true
#| code-fold: true

missing_y = Bool.(rand.(Binomial.(1,  invlogit.(0.9 * (y .- 15)))))
xobs = x[.!(missing_y)]
yobs = y[.!(missing_y)]
lm_mnar = lm([ones(n - sum(missing_y)) xobs], yobs)
y_lm_mnar = predict(lm_mnar, [ones(length(xpred)) xpred])

p2 = scatter(xobs, yobs, xlabel=L"$x$", ylabel=L"$y$", label=false, markersize=5, size=(600, 500), color=:blue)
scatter!(x[missing_y], y[missing_y], alpha=0.9, color=:lightgrey, label=false, markersize=5)
plot!(xpred, y_lm_all, color=:red, lw=3, label="Complete-Data Inference", ribbon=GLM.dispersion(lm_all), fillalpha=0.2)
plot!(xpred, y_lm_mnar, color=:blue, lw=3, linestyle=:dot, label="Observed-Data Inference", ribbon=GLM.dispersion(lm_mnar), fillalpha=0.2)

```
:::
::::


## Implications of Missingness Mechanism

1. **MCAR**: Strong, but generally implausible. Can only use complete cases as observed data is fully representative.
2. **MAR**: More plausible than MCAR, can still justify complete-case analysis as conditional observed distributions are unbiased estimates of conditional complete distributions. 
3. **MNAR**: **Deletion is a bad idea**. The observed data does not follow the same conditional distribution. Missingness can be informative: try to model the missingness mechanism.


## Methods for Dealing with Missing Data

1. **Imputation**: substitute values for missing data before analysis;
2. **Averaging**: find expected values over all possible values of the missing variables.
 
# Multiple Imputation Example

## Example Quality Data

```{julia}
#| label: fig-airquality-data
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true

dat = CSV.read("data/airquality/airquality.csv", DataFrame)
rename!(dat, :"Solar.R" => :Solar)
dat.Miss_Ozone = ismissing.(dat.Ozone)
dat.Miss_Solar = ismissing.(dat.Solar)
dat[2:5, 1:7]
```

## Assessing Missingness (Ozone)

```{julia}
#| label: fig-airquality-missing-ozone
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true
#| layout-ncol: 2

dat_ozone_complete = filter(:Ozone => x -> !ismissing(x), dat)
dat_ozone_missing = filter(:Ozone => x -> ismissing(x), dat)

p1 = scatter(dat_ozone_complete.Temp, dat_ozone_complete.Wind, xlabel = "Temperature (°C)", ylabel="Wind (mph)", markersize=5, color=:blue, label="Not Missing")
scatter!(dat_ozone_missing.Temp, dat_ozone_missing.Wind, markersize=5, color=:orange, label="Missing")
plot!(size=(600, 450))

p2 = scatter(dat_ozone_complete.Month, dat_ozone_complete.Day, xlabel = "Month", ylabel="Day", markersize=5, color=:blue, label="Not Missing")
scatter!(dat_ozone_missing.Month, dat_ozone_missing.Day, markersize=5, color=:orange, label="Missing")
plot!(size=(600, 450))

display(p1)
display(p2)
```

## Assessing Missingness (Solar)

```{julia}
#| label: fig-airquality-missing-solar
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true
#| layout-ncol: 2

dat_solar_complete = filter(:Solar => x -> !ismissing(x), dat)
dat_solar_missing = filter(:Solar => x -> ismissing(x), dat)

p1 = scatter(dat_solar_complete.Temp, dat_solar_complete.Wind, xlabel = "Temperature (°C)", ylabel="Wind (mph)", markersize=5, color=:blue, label="Not Missing")
scatter!(dat_solar_missing.Temp, dat_solar_missing.Wind, markersize=5, color=:orange, label="Missing")
plot!(size=(600, 450))

p2 = scatter(dat_solar_complete.Month, dat_solar_complete.Day, xlabel = "Month", ylabel="Day", markersize=5, color=:blue, label="Not Missing")
scatter!(dat_solar_missing.Month, dat_solar_missing.Day, markersize=5, color=:orange, label="Missing")
plot!(size=(600, 450))

display(p1)
display(p2)
```

## Prediction with Noise

1. Obtain bootstrap replicate of each **imputation** regression model.
2. Impute by simulating from predictive distribution (including noise!).
3. Fit **target** regression model to imputed dataset.
4. Repeat for number of imputations.

## Airquality Imputation (Prediction)

Impute using available data:

$$
\begin{align*}
\text{Ozone} &\sim f(\text{Wind}, \text{Temp}, \text{Month}, \text{Day}) \\
\text{Solar.R} &\sim g(\text{Wind}, \text{Temp}, \text{Month}, \text{Day}) \\
\end{align*}
$$


## Candidate Model-Based Imputations

```{julia}
#| label: fig-airquality-impute
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true
#| layout-ncol: 2

# bootstrap linear models and get predictions
nboot = 100
## model for solar radiation
function impute_bootstrap_model(dat_complete, dat_missing, model_formula)
    idx = sample(1:nrow(dat_complete), nrow(dat_complete), replace=true)
    dat_boot = dat_complete[idx, :]
    mod = lm(model_formula, dat_boot)
    return mod
end

function impute_predict_regression(dat_complete, dat_missing, nboot, model_formula)
    impute_out = zeros(nrow(dat_missing), nboot)
    for i = 1:nboot
        mod = impute_bootstrap_model(dat_complete, dat_missing, model_formula)
        impute_out[:, i] = predict(mod, dat_missing) .+ rand(Normal(0, GLM.dispersion(mod.model)), size(impute_out)[1])
    end
    return impute_out
end

impute_solar = impute_predict_regression(dat_solar_complete, dat_solar_missing, nboot, @formula(Solar ~ Wind + Temp + Month + Day))

## model for ozone
impute_ozone = impute_predict_regression(dat_ozone_complete, dat_ozone_missing, nboot, @formula(Ozone ~ Wind + Temp + Month + Day))

# impute values into the complete-case dataset and plot
function impute_variables(dat, impute_ozone, impute_solar)
    impute = deepcopy(dat)
    impute[ismissing.(impute.Ozone), :Ozone] = round.(impute_ozone[:, 1]; digits=0)
    impute[ismissing.(impute.Solar), :Solar] = round.(impute_solar[:, 1]; digits=0)
    return impute
end
impute1 = impute_variables(dat, impute_ozone[:, 1], impute_solar[:, 1])
p1 = scatter(impute1.Solar[.!(impute1.Miss_Ozone) .& .!(impute1.Miss_Solar)], impute1.Ozone[.!(impute1.Miss_Ozone) .& .!(impute1.Miss_Solar)], color=:blue, markersize=5, xlabel=L"Solar Radiation (W/m$^2$)", ylabel="Ozone (ppb)", label="Observed")
scatter!(impute1.Solar[impute1.Miss_Ozone .| impute1.Miss_Solar], impute1.Ozone[impute1.Miss_Ozone .| impute1.Miss_Solar], color=:orange, markersize=5, label="Imputed")
plot!(size=(600, 450))

impute2 = impute_variables(dat, impute_ozone[:, 2], impute_solar[:, 2])
p2 = scatter(impute2.Solar[.!(impute2.Miss_Ozone) .& .!(impute2.Miss_Solar)], impute2.Ozone[.!(impute2.Miss_Ozone) .& .!(impute2.Miss_Solar)], color=:blue, markersize=5, xlabel=L"Solar Radiation (W/m$^2$)", ylabel="Ozone (ppb)", label="Observed")
scatter!(impute2.Solar[impute2.Miss_Ozone .| impute2.Miss_Solar], impute2.Ozone[impute2.Miss_Ozone .| impute2.Miss_Solar], color=:orange, markersize=5, label="Imputed")
plot!(size=(600, 450))

display(p1)
display(p2)
```

## Model Imputed Time Series (Ozone)

```{julia}
#| label: fig-airquality-impute-ozone-ts-model
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true

p1 = plot(dat.rownames, dat.Ozone, lw=3, color=:blue, label="Observations", xlabel="Day Number", ylabel="Ozone (ppb)")
for i = 1:nrow(dat_ozone_missing)
    label = i == 1 ? "Imputations" : false
    boxplot!(p1, [dat_ozone_missing[i, :rownames]], impute_ozone[i, :], color=:orange, label=label)
end
plot!(size=(1200, 500))

display(p1)
```

## Model Imputed Time Series (Solar)

```{julia}
#| label: fig-airquality-impute-solar-ts-model
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true

p2 = plot(dat.rownames, dat.Solar, lw=3, color=:blue, label="Observations", xlabel="Day Number", ylabel=L"Solar (W/m$^2$)")
for i = 1:nrow(dat_solar_missing)
    label = i == 1 ? "Imputations" : false
    boxplot!(p2, [dat_solar_missing[i, :rownames]], impute_solar[i, :], color=:orange, label=label)
end
plot!(size=(1200, 500))

display(p2)
```

## Model-Imputed Regression Coefficients

:::: {.columns}
::: {.column width=50%}
```{julia}
#| label: fig-airquality-regression
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true

β_boot = zeros(nboot)
σ_boot = zeros(nboot)
for i = 1:nboot
    dat_boot = impute_variables(dat, impute_ozone[:, i], impute_solar[:, i])
    model_boot = lm(@formula(Ozone ~ Solar), dat_boot)
    β_boot[i] = coef(model_boot)[2]
    σ_boot[i] = dispersion(model_boot.model)
end
β_est = mean(β_boot)
σ_est = sqrt(mean(σ_boot.^2) + (1 + 1/nboot) * var(β_boot))

# also get complete case estimates for later
cc_model = lm(@formula(Ozone ~ Solar), dropmissing(dat))
β_cc = coef(cc_model)[2]
σ_cc = dispersion(cc_model.model)
histogram(β_boot, xlabel=L"$\beta$", ylabel="Count", label=false)
vline!([β_cc], color=:red, label="Complete-Case")
plot!(size=(500, 450))
```
:::
::: {.column width=25%}

**Imputed**:

- $\hat{\beta} = `{julia} round.(β_est; digits=2)`$
- $\hat{\sigma} = `{julia} round.(σ_est; digits=0)`$

:::
::: {.column width=25%}

**Complete Case**:

- $\hat{\beta} = `{julia} round.(β_cc; digits=2)`$
- $\hat{\sigma} = `{julia} round.(σ_cc; digits=0)`$

:::
::::

## Predictive Mean Matching

1. Obtain bootstrap replicate of each **imputation** regression model.
2. Get predicted value of missing value $\hat{y}_j$.
3. Generate candidates by finding $k$ nearest complete cases (minimize $|y - \hat{y}_j|$) or use threshold $\eta$.
4. Sample from candidates to get imputed value.
5. Fit **target** regression model to imputed dataset.
6. Repeat for number of imputations.

## Predictive Mean Matching Imputations

```{julia}
#| label: fig-airquality-pmm-impute
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true
#| layout-ncol: 2

# bootstrap linear models and get predictions
nboot = 100 # number of bootstrap samples for parameter variabiity
k = 5 # number of nearest-neighbors to sample from

## model for solar radiation
function impute_pmm(dat_complete, dat_missing, nboot, nneighbors, model_formula, target_name)
    impute = zeros(nrow(dat_missing), nboot)
    candidates = zeros(nrow(dat_missing), nboot, nneighbors)
    for i = 1:nboot
        mod = impute_bootstrap_model(dat_complete, dat_missing, model_formula)
        ŷ = predict(mod, dat_missing) # get predicted value for missing data
        y = predict(mod, dat_complete)
        for j = 1:nrow(dat_missing)
            d = abs.(y .- ŷ[j])
            sort_idx = sortperm(d)
            candidates[j, i, 1:nneighbors] = dat_complete[sort_idx[1:nneighbors], target_name]
            impute[j, i] = sample(candidates[j, i, :])
        end
    end
    return impute
end

impute_ozone_pmm = impute_pmm(dat_ozone_complete, dat_ozone_missing, 100, 5, @formula(Ozone ~ Wind + Temp + Month + Day), Symbol("Ozone"))
impute_solar_pmm = impute_pmm(dat_solar_complete, dat_solar_missing, 100, 5, @formula(Solar ~ Wind + Temp + Month + Day), Symbol("Solar"))


function impute_variables(dat, impute_ozone, impute_solar)
    impute = deepcopy(dat)
    impute[ismissing.(impute.Ozone), :Ozone] = round.(impute_ozone[:, 1]; digits=0)
    impute[ismissing.(impute.Solar), :Solar] = round.(impute_solar[:, 1]; digits=0)
    return impute
end
impute1 = impute_variables(dat, impute_ozone_pmm[:, 1], impute_solar_pmm[:, 1])
p1 = scatter(impute1.Solar[.!(impute1.Miss_Ozone) .& .!(impute1.Miss_Solar)], impute1.Ozone[.!(impute1.Miss_Ozone) .& .!(impute1.Miss_Solar)], color=:blue, markersize=5, xlabel=L"Solar Radiation (W/m$^2$)", ylabel="Ozone (ppb)", label="Observed")
scatter!(impute1.Solar[impute1.Miss_Ozone .| impute1.Miss_Solar], impute1.Ozone[impute1.Miss_Ozone .| impute1.Miss_Solar], color=:orange, markersize=5, label="Imputed")
plot!(size=(600, 450))

impute2 = impute_variables(dat, impute_ozone_pmm[:, 2], impute_solar_pmm[:, 2])
p2 = scatter(impute2.Solar[.!(impute2.Miss_Ozone) .& .!(impute2.Miss_Solar)], impute2.Ozone[.!(impute2.Miss_Ozone) .& .!(impute2.Miss_Solar)], color=:blue, markersize=5, xlabel=L"Solar Radiation (W/m$^2$)", ylabel="Ozone (ppb)", label="Observed")
scatter!(impute2.Solar[impute2.Miss_Ozone .| impute2.Miss_Solar], impute2.Ozone[impute2.Miss_Ozone .| impute2.Miss_Solar], color=:orange, markersize=5, label="Imputed")
plot!(size=(600, 450))

display(p1)
display(p2)
```

## PMM Imputed Time Series (Ozone)

```{julia}
#| label: fig-airquality-impute-ozone-ts-pmm
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true

p1mm = plot(dat.rownames, dat.Ozone, lw=3, color=:blue, label="Observations", xlabel="Day Number", ylabel="Ozone (ppb)")
for i = 1:nrow(dat_ozone_missing)
    label = i == 1 ? "Imputations" : false
    boxplot!(p1mm, [dat_ozone_missing[i, :rownames]], impute_ozone_pmm[i, :], color=:orange, label=label)
end
plot!(size=(1200, 500))

display(p1mm)
```

## PMM Imputed Time Series (Solar)

```{julia}
#| label: fig-airquality-impute-solar-ts-pmm
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true

p2mm = plot(dat.rownames, dat.Solar, lw=3, color=:blue, label="Observations", xlabel="Day Number", ylabel=L"Solar (W/m$^2$)")
for i = 1:nrow(dat_solar_missing)
    label = i == 1 ? "Imputations" : false
    boxplot!(p2mm, [dat_solar_missing[i, :rownames]], impute_solar_pmm[i, :], color=:orange, label=label)
end
plot!(size=(1200, 500))

display(p2mm)
```

## PMM-Imputed Regression Coefficients

:::: {.columns}
::: {.column width=50%}
```{julia}
#| label: fig-airquality-pmm
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true

β_boot = zeros(nboot)
σ_boot = zeros(nboot)
for i = 1:nboot
    dat_boot = impute_variables(dat, impute_ozone[:, i], impute_solar[:, i])
    model_boot = lm(@formula(Ozone ~ Solar), dat_boot)
    β_boot[i] = coef(model_boot)[2]
    σ_boot[i] = dispersion(model_boot.model)
end
β_est = mean(β_boot)
σ_est = sqrt(mean(σ_boot.^2) + (1 + 1/nboot) * var(β_boot))

# also get complete case estimates for later
cc_model = lm(@formula(Ozone ~ Solar), dropmissing(dat))
β_cc = coef(cc_model)[2]
σ_cc = dispersion(cc_model.model)
histogram(β_boot, xlabel=L"$\beta$", ylabel="Count", label=false)
vline!([β_cc], color=:red, label="Complete-Case")
plot!(size=(500, 450))
```
:::
::: {.column width=25%}

**Imputed**:

- $\hat{\beta} = `{julia} round.(β_est; digits=2)`$
- $\hat{\sigma} = `{julia} round.(σ_est; digits=0)`$

:::
::: {.column width=25%}

**Complete Case**:

- $\hat{\beta} = `{julia} round.(β_cc; digits=2)`$
- $\hat{\sigma} = `{julia} round.(σ_cc; digits=0)`$

:::
::::


## Comparison of Imputations (Solar)

```{julia}
#| label: fig-airquality-impute-solar-comparison
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true
#| layout-ncol: 2

impute_model_df = DataFrame(impute_solar', :auto)
impute_model_df_stk = stack(impute_model_df)
impute_model_df_stk.Method .= "Prediction"

impute_pmm_df = DataFrame(impute_solar_pmm', :auto)
impute_pmm_df_stk = stack(impute_pmm_df)
impute_pmm_df_stk.Method .= "PMM"

impute_all_df = vcat(impute_model_df_stk, impute_pmm_df_stk)

@df impute_all_df groupedboxplot(:variable, :value, group=:Method, xlabel="Imputed Case", ylabel=L"Solar Radiation (W/m$^2$)")
plot!(size=(1300, 500))
```

## Comparison of Imputations (Ozone)

```{julia}
#| label: fig-airquality-impute-ozone-comparison
#| fig-cap: Air quality dataset.
#| echo: true
#| code-fold: true
#| layout-ncol: 2

impute_model_df = DataFrame(impute_ozone', :auto)
impute_model_df_stk = stack(impute_model_df)
impute_model_df_stk.Method .= "Prediction"

impute_pmm_df = DataFrame(impute_ozone_pmm', :auto)
impute_pmm_df_stk = stack(impute_pmm_df)
impute_pmm_df_stk.Method .= "PMM"

impute_all_df = vcat(impute_model_df_stk, impute_pmm_df_stk)

@df impute_all_df groupedboxplot(:variable, :value, group=:Method, xlabel="Imputed Case", ylabel="Ozone (ppb)")
plot!(size=(1300, 500))
```

# Key Points 

## Key Points

- Use as much information as possible when conducting multiple imputation.
- Incorporate as much uncertainty as possible to avoid biasing downstream results: we don't know what the missing data looks like!

# Class Review

## Inference and Description Are Linked

:::: {.columns}
::: {.column width=50%}

- Knowing what is important to describe requires a model of data generation;
- Doing **meaningful** inference requires a model of data generation.

:::
::: {.column width=50%}

![Spidermen Meme](memes/spidermen-description-inference.jpg){width=100%}

:::
::::

## Themes of This Class

:::: {.columns}
::: {.column width=60%}
- Probability theory helps us deduce logical implications of theories **conditional on our assumptions**
- Cannot use an "objective" procedure to avoid **subjective responsibility**
- Vaguely motivated procedures give vague or misleading results
:::

::: {.column width=40%}
::: {.center}
![Bart Statistics Meme](memes/peter_parker_method_assumptions.png){width=100%}
:::
:::
::::

## Data Generation Approximates Reality

:::: {.columns}
::: {.column width=33%}
![Estimand Estimator Cake](memes/estimand_cake.png){width=100%}
:::
::: {.column width=33%}
::: {.fragment .fade-in}
![Estimand Estimator Cake](memes/estimator_cake.png){width=100%}
:::
:::
::: {.column width=33%}
::: {.fragment .fade-in}
![Estimate Cake](memes/estimate_cake.png){width=100%}
:::
:::
::::

::: {.caption}
Source: Richard McElreath
:::


## Class Review

```{mermaid}
timeline
      Introduction: Overview
                  : Hypothesis Testing and Scientific Inference
      Probability Fundamentals: Prob/Stats "Review"
                              : Modeling Data-Generating Processes
                              : Bayesian Statistics
                              : Model-Data Discrepancy
                              : Autocorrelated Residuals
      Simulation Methods: Monte Carlo
                        : Bootstrap
                        : MCMC
      Model Evaluation: Cross-Validation
                      : Model Selection
      Useful Extras: Extreme Values
                    : Missing Data
                    
```

## Workflow Covered In Class

:::: {.columns}
::: {.column width=50%}
0. Exploratory Analysis
1. Develop candidate model(s) and calibrate.
2. Simulate from models to assess implications.
3. Compare evidence for models with scoring rules/information criteria.
:::

::: {.column width=50%}
::: {.center}
![Rock Paper Scissors meme](memes/rock-paper-theory-model.jpg){width=100%}
:::
:::
::::


## What Might Come Next

- More advanced probability models (*e.g.* mixtures)
- Spatial models
- Experimental design (confounds)
- (Probabilistic) Machine learning


## Upcoming Schedule

**Wednesday**: No Class

**Next Week + 5/5**: Project Presentations

## Assessments

**HW5**: due 5/2.

**Literature Critique**: Due 5/2.

## References 